# -*- coding: utf-8 -*-
"""Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m6dpeHdLkBykJpYDF74JiI8ifk1iniGh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""https://www.kaggle.com/datasets/ardamavi/sign-language-digits-dataset/code"""

import warnings
warnings.filterwarnings('ignore')

from google.colab import files
files.upload()

!ls

x_l = np.load('X.npy')
y_l = np.load('Y.npy')

img_size = 64
plt.subplot(1, 2, 1) #plt. subplot() metodu aldığı “satır sayısı, sütun sayısı ve indeks” parametleri ile çizdireceğiniz bir sonraki grafiği yerleştirir.
plt.imshow(x_l [260].reshape(img_size, img_size))
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(x_l [900].reshape(img_size, img_size))
plt.axis('off')

# Görüntü dizisini oluşturmak için sıfır ve bir işaret dizilerini birleştiriyoruz.
# Sonra sıfır işaretli görüntüler için 0 ve bir işaretli görüntüler için 1 etiket dizisi oluşturuyoruz.
X = np.concatenate((x_l[204:409], x_l[822:1027] ), axis=0) # from 0 to 204 is zero sign and from 205 to 410 is one sign 
z = np.zeros(205)
o = np.ones(205)
Y = np.concatenate((z, o), axis=0).reshape(X.shape[0],1)
print("X shape: " , X.shape)
print("Y shape: " , Y.shape)

"""* concatenate etmek istediğimiz verileri alıp birleştirerek yeni veri seti oluşturmak.
* X'in shape'i (410, 64, 64)

  410, 410 adet görüntümüz olduğu anlamına gelir (sıfır ve bir işareti)

  64 resim boyutumuzun 64x64 olduğu anlamına gelir


* Y'nin shape'i (410,1)

  410, 410 etiketimiz olduğu anlamına gelir.

  1, y'nin vektör olduğu anlamına gelir.

* X ve Y train ve test setlerine ayrılır.
* test_size = test boyutunun yüzdesi
* random_state = randomize ederken aynı seed'i kullan. Bu, tekrar tekrar train_test_split'i çağırırsak, aynı random_state'e sahip olduğumuz için her zaman aynı train ve test dağılımını oluşturduğu anlamına gelir.
"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=42)
number_of_train = X_train.shape[0]
number_of_test = X_test.shape[0]

"""* Şimdi 3 boyutlu girdi dizimiz (X) var, bu yüzden ilk derin öğrenme modelimiz için girdi olarak kullanmak üzere düzleştirmemiz (flatten-2B) yapmamız gerekiyor.
* Flattening is converting the data into a 1-dimensional array for inputting it to the next layer.
* Etiket dizimiz (Y) zaten düzleştirilmiş olduğu için bu şekilde bırakıyoruz.
* X dizisini (görüntü dizisini) düzleştirelim.
"""

X_train_flatten = X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2])
X_test_flatten = X_test.reshape(number_of_test, X_test.shape[1]*X_test.shape[2])
print("X train flatten", X_train_flatten.shape)
print("X test flatten", X_test_flatten.shape)

"""* Görüldüğü gibi, eğitim verimizde 348 görüntümüz var ve görüntü dizisinde her görüntünün 4096 pikseli var.
* Test verimizde ise 62 görüntümüz var. (test size, train size'a göre ayarlıyor.)
* X'ler resimlerin olduğu Y'ler çıktıların (1 ve 0) olduğu yer.

Train ve test verilerinin transpozu alınır.
"""

x_train = X_train_flatten.T
x_test = X_test_flatten.T
y_train = Y_train.T
y_test = Y_test.T
print("x train: ", x_train.shape)
print("x test: ", x_test.shape)
print("y train: ", y_train.shape)
print("y test: ", y_test.shape)

"""*İlave bilgi*
* Veri setini daha yakından tanımak istersek, aşağıdaki kod bloğu ile 10 veriyi örnek olarak alıp inceleyebiliriz.

"""

print('Examples:')
n = 10
plt.figure(figsize=(20,4))
for i in range(1, n+1):
  # Display some data:
  ax = plt.subplot(1, n, i)
  plt.imshow(X_train[i].reshape(img_size, img_size))
  plt.gray()
  plt.axis('off')

"""* Sklearn kütüphanesinde, lojistik regresyonun uygulanmasını kolaylaştıran bir lojistik regresyon yöntemi vardır.
* Ayrıntılı bilgi için aşağıdaki linkte yer alan dokümantasyonu inceleyebilirsiniz. https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html


"""

from sklearn import linear_model
logreg = linear_model.LogisticRegression(random_state = 42, max_iter=150)
print("train accuracy: {}".format(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))
print("test accuracy: {}".format(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))